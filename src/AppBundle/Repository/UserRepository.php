<?php

namespace AppBundle\Repository;

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

use AppBundle\Entity\User;

use InvalidArgumentException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
  /**
   * Return the User with the given user's userId if it exists;
   * Otherwise, a NotFoundHttpException is thrown.
   *
   * @param string $userId
   *
   * @return User
   * @throws NotFoundHttpException;
   */
  public function getUserById($userId): User {
    $user = $this->findOneBy(['userId' => $userId]);
    if (!$user) {
      throw new NotFoundHttpException('User with id ' . $userId . ' is not found');
    }
    return $user;
  }

  /**
   * Return the User with the given user' email if it exists;
   * Otherwise, a NotFoundHttpException is thrown.
   *
   * @param string $email
   *
   * @return User
   * @throws NotFoundHttpException;
   */
  public function getUserByEmail(string $email): User {
    $user = $this->findOneBy(['email' => $email]);
    if (!$user) {
      throw new NotFoundHttpException('User with email ' . $email . ' is not found');
    }
    return $user;
  }

  /**
   * Creates and returns a new user from the given $data and persists
   * the data changes to the database.
   *
   * @param array $data
   *
   * @throws InvalidArgumentException
   */
  public function createUser(array $data): User {
    try
    {
      $user = $this->getUserByEmail($data['email']);
      throw new \Exception($data['email'] . ' user already exist.');
    } catch(NotFoundHttpException $e) {
      // Expects to be caught because we need email addresses to be unique.
    }

    $user = new User();
    $user->setEmail($data['email'])
         ->setAddress($data['address'])
         ->setZipCode($data['zipCode'])
         ->setIsActiveStatus($data['isActive']);

    $em = $this->getEntityManager();
    $em->persist($user);
    $em->flush();
    return $user;
  }

  /**
   * Edits the given user with the given data and persists
   * the data changes to the database.
   *
   * @param User $user
   * @param array $data
   *
   * @throws NotFoundHttpException
   */
  public function editUser(User $user, array $data) {
    if (array_key_exists('email', $data)) {
      if ($user->getEmail() != $data['email']) {
        $this->checkEmail($data['email']);

        try
        {
          $user = $this->getUserByEmail($data['email']);
          throw new \Exception($data['email'] . ' user already exist.');
        } catch(NotFoundHttpException $e) {
          // Expects to be caught because we need email addresses to be unique.
        }
      }
    }

    $user->setEmail($data['email'])
         ->setAddress($data['address'])
         ->setZipCode($data['zipCode'])
         ->setIsActiveStatus($data['isActive']);

     $em = $this->getEntityManager();
     $em->persist($user);
     $em->flush();
  }

  /**
    * Removes the given user from the user table and persists
    * the data changes to the database.
    *
    * @param User $user
    */
  public function deleteUser(User $user) {
    $em = $this->getEntityManager();
    $em->remove($user);
    $em->flush();
  }

  /**
    * @type const string
    */
  const EMAIL_FORMAT = '/[a-zA-Z0-9-._+]+@[a-zA-Z0-9-._+]+[.][a-zA-Z]+/';


  public function checkEmail(string $email) {
    if (!$email) {
      throw new InvalidArgumentException('email is required.');
    }
    if (!preg_match(self::EMAIL_FORMAT, $email)) {
      throw new InvalidArgumentException($email . ' must be a valid email format.');
    }
  }
}
